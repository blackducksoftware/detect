import com.synopsys.integration.detect.artifactory.UpdateArtifactoryPropertiesTask
import com.synopsys.integration.detect.battery.UpdateBatteryTask
import com.synopsys.integration.detect.verification.VerifyBlackDuckDetectTask

buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
        blackDuckCommonVersion = '49.1.0'
        polarisCommonVersion = '0.21.0'
        junitPlatformDefaultTestTags = 'integration, performance, battery'
    }

    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle', to: buildscript
    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-dependencies.gradle', to: buildscript

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.synopsys.integration:blackduck-common:${blackDuckCommonVersion}"
        classpath "com.synopsys.integration:polaris-common:${polarisCommonVersion}"
    }
}

group = 'com.synopsys.integration'
version = '6.7.0-SNAPSHOT'

apply plugin: 'com.synopsys.integration.solution'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: 'docs.gradle'

def createArtifactName() {
    return "${buildDir}/libs/${project.name}-${version}.jar"
}

def createBatteryPath() {
    return "${buildDir}/battery/"
}

subprojects {
    group = rootProject.group
    version = rootProject.version
    apply plugin: 'com.synopsys.integration.simple'
    apply plugin: 'io.spring.dependency-management'

    license {
        header rootProject.file('LICENSE')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

allprojects {
    dependencies {
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
        implementation 'com.fasterxml.jackson.core:jackson-core:2.10.0'
        implementation 'com.moandjiezana.toml:toml4j:0.7.1'
        implementation 'com.paypal.digraph:digraph-parser:1.0'
        implementation "com.synopsys.integration:blackduck-common:${blackDuckCommonVersion}"
        implementation 'com.synopsys:method-analyzer-core:0.1.0'

        implementation 'org.freemarker:freemarker:2.3.26-incubating'
        implementation 'org.jetbrains:annotations:19.0.0'

        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'
        testImplementation 'org.mockito:mockito-core:2.+'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def jarName = createArtifactName()
            artifact(jarName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    implementation project(':configuration')
    implementation project(':detect-configuration')
    implementation project(':detectable')
    implementation project(':detector')

    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8'
    implementation "com.synopsys.integration:polaris-common:${polarisCommonVersion}"

    implementation 'org.apache.maven.shared:maven-invoker:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.yaml:snakeyaml:1.24'
    implementation 'org.zeroturnaround:zt-zip:1.13'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation project(':configuration').sourceSets.test.output
}

springBoot { mainClassName = 'com.synopsys.integration.detect.Application' }

tasks['testBattery'].doFirst {
    def batteryPath = new File(createBatteryPath())
    batteryPath.mkdirs()
    environment 'BATTERY_TESTS_DETECT_JAR_PATH', createArtifactName()
    environment 'BATTERY_TESTS_PATH', batteryPath.getCanonicalPath()
    environment 'BATTERY_TESTS_JAVA_PATH', org.gradle.internal.jvm.Jvm.current().javaExecutable.getCanonicalPath()
}

task updateBattery(type: UpdateBatteryTask) {}
task updateArtifactoryProperties(type: UpdateArtifactoryPropertiesTask) {
    dependsOn artifactoryDeploy
}

task runDetect(type: JavaExec) {
    dependsOn build

    classpath = files(createArtifactName())
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.synopsys.integration.detect.Application'
    args = ['--detect.risk.report.pdf=true']
}

task verifyBlackDuckDetect(type: VerifyBlackDuckDetectTask) {
    dependsOn runDetect
    task verifyDetect() {
        dependsOn verifyBlackDuckDetect
    }
}

String parseAirGapZipPath(ByteArrayOutputStream standardOutput) {
    String marker = 'Detect Air Gap Zip: '
    String line = standardOutput.toString().split('\n').find { it.contains(marker) }
    String path = line.substring(line.lastIndexOf(marker) + marker.length()).trim()
    println "Found Air Gap Zip: ${path}"
    return path
}

task createAirGapZip(type: JavaExec) {
    dependsOn build

    classpath = files(createArtifactName())
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.synopsys.integration.detect.Application'
    args = ["--detect.output.path=${buildDir}/libs/", '-z']
    standardOutput = new ByteArrayOutputStream()
    doLast {
        createAirGapZip.ext.airGapPath = parseAirGapZipPath(standardOutput)
    }
}

task publishAirGapZip() {
    dependsOn createAirGapZip

    doLast {
        def airGapZipName = "${project.name}-${version}-air-gap.zip"
        def airGapZipLocation = createAirGapZip.airGapPath
        exec {
            commandLine 'curl', '--insecure', '-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT',
                    "${project.ext.deployArtifactoryUrl}/${project.ext.artifactoryRepo}/com/synopsys/integration/${project.name}/${version}/${airGapZipName}", '-T', "${airGapZipLocation}", '-f'
        }
    }
}

task createAirGapZipWithoutDocker(type: JavaExec) {
    dependsOn build

    classpath = files(createArtifactName())
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.synopsys.integration.detect.Application'
    args = ['--detect.gradle.path=gradlew', '-z', 'GRADLE,NUGET']
    standardOutput = new ByteArrayOutputStream()
    doLast {
        createAirGapZipWithoutDocker.ext.airGapPath = parseAirGapZipPath(standardOutput)
    }
}

task publishAirGapZipWithoutDocker() {
    dependsOn createAirGapZipWithoutDocker

    doLast {
        def airGapZipName = "${project.name}-${version}-air-gap-gradle-nuget.zip"
        def airGapZipLocation = createAirGapZipWithoutDocker.airGapPath
        exec {
            commandLine 'curl', '--insecure', '-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT',
                    "${project.ext.deployArtifactoryUrl}/${project.ext.artifactoryRepo}/com/synopsys/integration/${project.name}/${version}/${airGapZipName}", '-T', "${airGapZipLocation}", '-f'
        }
    }
}

task signJar() {
    dependsOn build
    doLast {
        exec {
            commandLine 'jarsigner', '-tsa', 'http://timestamp.globalsign.com/scripts/timestamp.dll', '-storetype', 'pkcs12', '-storepass', "${jarSigningKeystorePassword}", '-keystore', "${jarSigningKeystorePath}", "${createArtifactName()}", "${jarSigningCertificateAlias}"
        }
    }
}
