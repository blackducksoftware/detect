import java.io.File

final String distributionsFolder = "${buildDir}/distributions"
final String buildArtifactFolder = "${buildDir}/libs"
final String airGapFolder = "${buildArtifactFolder}/packaged-inspectors"
final String gradleAirGapPath = "${airGapFolder}/gradle"
final String nugetAirGapPath = "${airGapFolder}/nuget"
final String configAirGapPath = "${buildArtifactFolder}/config"
final String dockerAirGapPath = "${airGapFolder}/docker"
final String artifactoryIntegrationPath = "com/blackducksoftware/integration"

final String airGapZipName = "${project.name}-${version}-air-gap.zip"

configurations {
    airGap
}

dependencies {
    airGap 'com.blackducksoftware.integration:integration-gradle-inspector:latest.release'
}

void fetchFile(File outputFile, String url) {
    if (outputFile.exists()) {
        return
    }
    if (!outputFile.getParentFile().exists()) {
        outputFile.getParentFile().mkdirs()
    }
    new URL(url).withInputStream{ inputStream -> outputFile.withOutputStream{ it << inputStream }}
}

task downloadNugetInspector {
    doLast {
        final def nugetInspectorUrl = 'https://www.nuget.org/api/v2/package/IntegrationNugetInspector/'
        final def nugetInspectorFile = new File(nugetAirGapPath, 'integrationnugetinspector.nupkg')
        fetchFile(nugetInspectorFile, nugetInspectorUrl)
        copy {
            from zipTree(nugetInspectorFile)
            into new File(nugetAirGapPath)
        }
    }
}

task downloadGradleInspectorMavenMetadata {
    doLast {
        final def gradleInspectorMavenMetadataUrl = 'http://repo2.maven.org/maven2/com/blackducksoftware/integration/integration-gradle-inspector/maven-metadata.xml'
        fetchFile(new File(gradleAirGapPath, 'maven-metadata.xml'), gradleInspectorMavenMetadataUrl)
    }
}

task copyGradleInspectorAndDependencies(type: Copy) {
    dependsOn downloadGradleInspectorMavenMetadata
    from configurations.airGap
    include '*.jar'
    into gradleAirGapPath
}

task copyApplicationProperties(type: Copy) {
    from 'src/main/resources/'
    include 'application.properties'
    into configAirGapPath
}

task downloadDockerInspectorScript() {
    doLast {
        def dir = new File(dockerAirGapPath)
        dir.mkdir()
        def dockerInspectorScript = new File(dockerAirGapPath, 'hub-docker-inspector.sh')
        final def dockerInspectorScriptUrl = 'https://blackducksoftware.github.io/hub-docker-inspector/hub-docker-inspector.sh'
        fetchFile(dockerInspectorScript, dockerInspectorScriptUrl)              
        dockerInspectorScript.setExecutable(true)          
    }
}

task downloadDockerInspector() {
    dependsOn downloadDockerInspectorScript
    doLast {
        exec {
        	workingDir "${dockerAirGapPath}"
            environment 'DOCKER_INSPECTOR_CURL_OPTS', '--insecure'
            commandLine 'bash', "${dockerAirGapPath}/hub-docker-inspector.sh", '--pullairgapzip'
        }
        exec {
        	workingDir "${dockerAirGapPath}"
        	commandLine 'unzip', '-n', 'hub-docker-inspector-*-air-gap.zip'
        }
        delete fileTree("${dockerAirGapPath}") {
            include 'hub-docker-inspector-*-air-gap.zip'
        }
    }
}

task createAirGapZip(type: Zip) {
    dependsOn build, copyApplicationProperties, downloadNugetInspector, copyGradleInspectorAndDependencies, downloadDockerInspector
    from buildArtifactFolder
    include "${project.name}*.jar"
    include 'packaged-inspectors/**'
    include 'config/**'
    archiveName airGapZipName
    destinationDir(file(distributionsFolder))
}

task publishAirGapZip() {
    dependsOn createAirGapZip
    doLast {
        exec {
            commandLine 'curl', '--insecure','-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT', "${project.ext.artifactoryUrl}/${project.ext.artifactoryRepo}/${artifactoryIntegrationPath}/${project.name}/${version}/${airGapZipName}", '-T', "${distributionsFolder}/${airGapZipName}", '-f'
        }
    }
}
