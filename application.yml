# ______     _            _
# |  _  \   | |          | |
# | | | |___| |_ ___  ___| |_
# | | | / _ \ __/ _ \/ __| __|
# | |/ /  __/ ||  __/ (__| |_
# |___/ \___|\__\___|\___|\__|
# v8.8.0-SNAPSHOT

# Uncomment and update required options. To use this file as your Detect configuration, rename it to application.yml
# and place it in the directory from which you are executing Detect. Default values (where applicable) have been filled
# in for your information.
# Note that property values set through environment variables, on the command line or in a .properties file will take
# precedence over the values here.
########################################################################################################################

##
# BAZEL
##
#detect.bazel.cquery.options: 
        # A comma-separated list of additional options to pass to the bazel cquery command.
#detect.bazel.path: 
        # The path to the Bazel executable.
#detect.bazel.target: 
        # The Bazel target (for example, //foo:foolib) for which dependencies are collected. For Detect to run Bazel, this property must be set.
#detect.bazel.workspace.rules: NONE
        # By default Detect discovers Bazel dependencies using all of the supported Bazel workspace rules that it finds in the WORKSPACE file. Alternatively you can use this property to specify the list of Bazel workspace rules Detect should use.
        # Acceptable values:[ALL, NONE, MAVEN_JAR, MAVEN_INSTALL, HASKELL_CABAL_LIBRARY, HTTP_ARCHIVE]

##
# BINARY SCANNER
##
#detect.binary.scan.file.name.patterns: 
        # If specified, files in the source directory whose names match these file name patterns will be zipped and uploaded for binary scan analysis. This property will not be used if detect.binary.scan.file.path is specified. Search depth is controlled by property detect.binary.scan.search.depth. Directories specified via property detect.excluded.directories are excluded from the file search. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.
#detect.binary.scan.file.path: 
        # If specified, this file and this file only will be uploaded for binary scan analysis. This property takes precedence over detect.binary.scan.file.name.patterns. The BINARY_SCAN tool does not provide project and version name defaults to Detect, so you need to set project and version names via properties when only the BINARY_SCAN tool is invoked.
#detect.binary.scan.search.depth: 0
        # When binary scan filename patterns are being used to search for binary files to scan, this property sets the depth at which Detect will search for files (that match those patterns) to upload for binary scan analysis.

##
# BITBAKE
##
#detect.bitbake.build.env.name: oe-init-build-env
        # The name of the build environment init script.
#detect.bitbake.dependency.types.excluded: NONE
        # The dependency types to exclude from the results.
        # Acceptable values:[NONE, BUILD]
#detect.bitbake.package.names: 
        # A comma-separated list of package names from which dependencies are extracted.
#detect.bitbake.search.depth: 1
        # The depth at which Detect will search for files generated by Bitbake.
#detect.bitbake.source.arguments: 
        # A comma-separated list of arguments to supply when sourcing the build environment init script.

##
# BLACKDUCK SERVER
##
blackduck.api.token: OGI3Y2EzYTQtOTM2ZC00ZjNiLTg0ZWYtNjk4YzYzMGFjMWI5OjIxMmRmNGJjLTRjZWMtNGU1Yy1iNWEyLTEwZGE0OGQ2MWRiMQ==
        # The access token used to authenticate with the Black Duck Server.
#blackduck.offline.mode: false
        # This can disable any Black Duck communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner.
#blackduck.offline.mode.force.bdio: false
        # This property will force Detect in offline mode to generate a BDIO even if no code locations were identified.
#blackduck.trust.cert: false
        # If true, automatically trust the certificate for the current run of Detect only.
blackduck.url: https://us1a-int-hub02.nprd.sig.synopsys.com
        # URL of the Black Duck server.
#detect.blackduck.scan.mode: INTELLIGENT
        # Set the Black Duck scanning mode of Detect
        # Acceptable values:[RAPID, EPHEMERAL, STATELESS, INTELLIGENT]
#detect.test.connection: false
        # Test the connection to Black Duck with the current configuration.
#detect.timeout: 300
        # The amount of time in seconds Detect will wait for network connection, for scans to finish, and to generate reports (i.e. risk and policy check). When changing this value, keep in mind the checking of policies might have to wait for scans to process which can take some time.

##
# CLEANUP
##
#detect.cleanup: true
        # If true, the files created by Detect will be cleaned up.

##
# CONAN
##
#detect.conan.arguments: 
        # A space-separated list of additional arguments to add to the 'conan info' command line when running Detect against a Conan project. Detect will execute the command 'conan info {additional arguments} .'
#detect.conan.attempt.package.revision.match: false
        # If package revisions are available (a Conan lock file is found or provided, and Conan's revisions feature is enabled), require that each dependency's package revision match the package revision of the component in the KB.
#detect.conan.dependency.types.excluded: NONE
        # Set this value to indicate which Conan dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, BUILD]
#detect.conan.lockfile.path: 
        # The path to the conan lockfile to apply when running 'conan info' to get the dependency graph. If set, Detect will execute the command 'conan info --lockfile {lockfile} .'
#detect.conan.path: 
        # The path to the conan executable.

##
# CONDA
##
#detect.conda.environment.name: 
        # The name of the anaconda environment used by your project.
#detect.conda.path: 
        # The path to the conda executable.

##
# CPAN
##
#detect.cpan.path: 
        # The path to the cpan executable.
#detect.cpanm.path: 
        # The path to the cpanm executable.

##
# DART
##
#detect.dart.path: 
        # The path to the dart executable.
#detect.flutter.path: 
        # The path to the flutter executable.
#detect.pub.dependency.types.excluded: NONE
        # Set this value to indicate which Dart pub dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, DEV]

##
# DEBUG
##
#detect.diagnostic: false
        # When enabled, diagnostic mode collects files valuable for troubleshooting (logs, BDIO file, extraction files, reports, etc.), writes them to a zip file, and logs the path to the zip file.
#detect.diagnostic.extended: false
        # When enabled, Synopsys Detect performs the actions of --detect.diagnostic, but also includes relevant files such as lock files and build artifacts.

##
# DEFAULT
##
#detect.phone.home.passthrough: 
        # Additional values may be sent home for usage information. The keys will be sent without the prefix.

##
# DETECTOR
##
#detect.accuracy.required: ALL
        # Detector types from which HIGH accuracy results are required when a detector of that type applies.
        # Acceptable values:[ALL, NONE, BITBAKE, CARGO, CARTHAGE, COCOAPODS, CONAN, CONDA, CPAN, CRAN, DART, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, IVY, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, PNPM, POETRY, RUBYGEMS, SBT, SWIFT, YARN, CLANG, XCODE]
#detect.excluded.detector.types: NONE
        # By default, all detectors will be included. If you want to exclude specific detectors, specify the ones to exclude here. Exclusion rules always win.
        # Acceptable values:[NONE, BITBAKE, CARGO, CARTHAGE, COCOAPODS, CONAN, CONDA, CPAN, CRAN, DART, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, IVY, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, PNPM, POETRY, RUBYGEMS, SBT, SWIFT, YARN, CLANG, XCODE]
#detect.included.detector.types: ALL
        # By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win.
        # Acceptable values:[ALL, BITBAKE, CARGO, CARTHAGE, COCOAPODS, CONAN, CONDA, CPAN, CRAN, DART, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, IVY, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, PNPM, POETRY, RUBYGEMS, SBT, SWIFT, YARN, CLANG, XCODE]
#detect.required.detector.types: 
        # The set of required detectors.
        # Acceptable values:[BITBAKE, CARGO, CARTHAGE, COCOAPODS, CONAN, CONDA, CPAN, CRAN, DART, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, IVY, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, PNPM, POETRY, RUBYGEMS, SBT, SWIFT, YARN, CLANG, XCODE]

##
# DOCKER
##
#detect.docker.image: 
        # The Docker image name (repo:tag) to inspect.
#detect.docker.image.id: 
        # The ID (shown in the 'IMAGE ID' column of 'docker images' output) of the target Docker image. The target image must already be local (must appear in the output of 'docker images').
#detect.docker.inspector.path: 
        # Use this property to point Detect to a local Docker Inspector jar file, instead of the default Docker Inspector jar file that Detect downloads from the binary repository. You need to ensure the version is compatible (the same major version that Detect downloads by default).
#detect.docker.inspector.version: 
        # Version of the Docker Inspector to use. By default Detect will attempt to automatically determine the version to use.
#detect.docker.passthrough: 
        # Additional properties may be passed to the docker inspector by adding the prefix detect.docker.passthrough to each Docker Inspector property name and assigning a value. The 'detect.docker.passthrough' prefix will be removed from the property name to generate the property name passed to Docker Inspector (with the given value).
#detect.docker.path: 
        # Path to the docker executable (used to load image inspector Docker images in order to run the Docker Inspector in air gap mode).
#detect.docker.platform.top.layer.id: 
        # To exclude components from platform layers from the results, assign to this property the ID of the top layer of the platform image. Get the platform top layer ID from the output of 'docker inspect platformimage:tag'. The platform top layer ID is the last item in RootFS.Layers. For more information, see 'Isolating application components' in the Docker Inspector documentation.
#detect.docker.tar: 
        # An image .tar file which is either a Docker image saved to a file using the 'docker save' command, or an Open Container Initiative (OCI) image .tar file. The file must be readable by all.

##
# GENERAL
##
#detect.follow.symbolic.links: true
        # If set to true, Detect will follow symbolic links when searching for detectors, when searching for files that select detectors (such as Bitbake and Sbt) need, when searching for directories to exclude from signature scan, and when searching for binary scan targets.  Symbolic links are not supported for Impact Analysis.
#detect.force.success: false
        # If true, Detect will always exit with code 0.
#detect.force.success.on.skip: false
        # If true, Detect will always exit with code 0 when a scan of any type is skipped. Typically this happens when the Black Duck minimum scan interval timer has not been met.
#detect.ignore.connection.failures: false
        # If true, Detect will ignore any products (eg. Black Duck) that it cannot connect to.
#detect.parallel.processors: 1
        # The number of threads to run processes in parallel, defaults to 1, but if you specify less than or equal to 0, the number of processors on the machine will be used.
#detect.target.type: SOURCE
        # Informs detect of what is being scanned which allows improved user experience when scanning different types of targets.
        # Acceptable values:[SOURCE, IMAGE]
#detect.wait.for.results: false
        # If set to true, Detect will wait for Synopsys products until results are available or the detect.timeout is exceeded.

##
# GO
##
#detect.go.mod.dependency.types.excluded: NONE
        # Set this value to indicate which Go Mod dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, UNUSED, VENDORED]
#detect.go.path: 
        # Path to the Go executable.

##
# GRADLE
##
#detect.gradle.build.command: 
        # Gradle command line arguments to add to the gradle/gradlew command line.
#detect.gradle.configuration.types.excluded: NONE
        # Set this value to indicate which Gradle configuration types Detect should exclude from the BOM.
        # Acceptable values:[NONE, UNRESOLVED]
#detect.gradle.excluded.configurations: 
        # A comma-separated list of Gradle configurations to exclude.
#detect.gradle.excluded.project.paths: 
        # A comma-separated list of Gradle subproject paths to exclude.
#detect.gradle.excluded.projects: 
        # A comma-separated list of Gradle subprojects to exclude.
#detect.gradle.included.configurations: 
        # A comma-separated list of Gradle configurations to include.
#detect.gradle.included.project.paths: 
        # A comma-separated list of Gradle subproject paths to include.
#detect.gradle.included.projects: 
        # A comma-separated list of Gradle subprojects to include.
#detect.gradle.path: 
        # The path to the Gradle executable (gradle or gradlew).

##
# HEX
##
#detect.hex.rebar3.path: 
        # The path to the rebar3 executable.

##
# IAC SCAN
##
#detect.iac.scan.arguments: 
        # A space-separated list of additional arguments to use when running the IaC Scanner.
#detect.iac.scan.paths: 
        # A comma-separated list of paths to perform IaC scans on.
#detect.iac.scanner.local.path: 
        # Use this property to specify the path to a local IaC Scanner.

##
# IMPACT ANALYSIS
##
#detect.impact.analysis.enabled: false
        # If set to true, Detect will attempt to look for *.class files and generate a Vulnerability Impact Analysis Report for upload to Black Duck.
#detect.impact.analysis.output.path: 
        # The path to the output directory for Impact Analysis reports.

##
# LERNA
##
#detect.lerna.excluded.packages: 
        # A comma-separated list of Lerna packages to exclude.
#detect.lerna.included.packages: 
        # A comma-separated list of Lerna packages to include.
#detect.lerna.package.types.excluded: NONE
        # Set this value to indicate which Lerna package types Detect should exclude from the BOM.
        # Acceptable values:[NONE, PRIVATE]
#detect.lerna.path: 
        # Path of the lerna executable.

##
# LOGGING
##
#logging.level.com.synopsys.integration: INFO
        # The logging level of Detect.
        # Acceptable values:[OFF, ERROR, WARN, INFO, DEBUG, TRACE]
#logging.level.detect: INFO
        # Shorthand for the logging level of detect. Equivalent to setting <i>logging.level.com.synopsys.integration</i>.
        # Acceptable values:[OFF, ERROR, WARN, INFO, DEBUG, TRACE]

##
# MAVEN
##
#detect.maven.build.command: 
        # Maven command line arguments to add to the mvn/mvnw command line.
#detect.maven.excluded.modules: 
        # A comma-separated list of Maven modules (subprojects) to exclude.
#detect.maven.excluded.scopes: 
        # A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include).
#detect.maven.included.modules: 
        # A comma-separated list of Maven modules (subprojects) to include.
#detect.maven.included.scopes: 
        # A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude).
#detect.maven.path: 
        # The path to the Maven executable (mvn or mvnw).

##
# NPM
##
#detect.npm.arguments: 
        # A space-separated list of additional arguments that Detect will add at then end of the npm ls command line when Detect executes the NPM CLI Detector on an NPM project.
#detect.npm.dependency.types.excluded: NONE
        # Set this value to indicate which Npm dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, DEV, PEER]
#detect.npm.path: 
        # The path to the Npm executable.

##
# NUGET
##
#detect.nuget.config.path: 
        # The path to the Nuget.Config file to supply to the nuget exe.
#detect.nuget.excluded.modules: 
        # The projects within the solution to exclude. Detect will exclude all projects with names that include any of the given regex patterns. To match a full project name (for example: 'BaGet.Core'), use a regular expression that matches only the full name ('^BaGet.Core$')
#detect.nuget.ignore.failure: false
        # If true errors will be logged and then ignored.
#detect.nuget.included.modules: 
        # The names of the projects in a solution to include (overrides exclude). Detect will include all projects with names that include any of the given regex patterns. To match a full project name (for example: 'BaGet.Core'), use a regular expression that matches only the full name ('^BaGet.Core$')
#detect.nuget.packages.repo.url: https://api.nuget.org/v3/index.json
        # The source for nuget packages

##
# PACKAGIST
##
#detect.packagist.dependency.types.excluded: NONE
        # Set this value to indicate which Packagist dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, DEV]

##
# PATHS
##
#detect.bash.path: 
        # Path to the Bash executable.
#detect.bdio.file.name: 
        # The desired file name of BDIO file Detect produces in the BDIO Output Directory.
#detect.bdio.output.path: 
        # The path to the output directory for the generated BDIO file.
#detect.detector.search.continue: false
        # By default, nesting rules limit which detectors can run on a subdirectory based on which detectors applied on any parent directory. Setting this property to true disables nesting rules.
#detect.detector.search.depth: 0
        # Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies.
#detect.excluded.directories: 
        # A comma-separated list of names, name patterns, relative paths, or path patterns of directories that Detect should exclude.
#detect.excluded.directories.defaults.disabled: false
        # If false, Detect will exclude the default directory names. See the detailed help for more information.
#detect.git.path: 
        # Path of the git executable
#detect.java.path: 
        # Path to the java executable.
detect.output.path: /Users/shanty/blackduck/scan-outputs
        # The path to the output directory.
#detect.project.detector: 
        # The detector that will be used to determine the project name and version when multiple detector types apply. This property should be used with detect.project.tool.
#detect.project.tool: DOCKER,DETECTOR,BAZEL
        # The tool priority for project name and version. The project name and version will be determined by the first tool in this list that provides them.
        # Acceptable values:[DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, DOCKER, BAZEL, IAC_SCAN]
#detect.scan.output.path: 
        # The output directory for all signature scanner output files. If not set, the signature scanner output files will be in a 'scan' subdirectory of the output directory.
#detect.source.path: 
        # The source path is the path to the project directory to inspect. If no value is provided, the source path defaults to the current working directory.
#detect.status.json.output.path: 
        # The directory to place a copy of the status.json file.
#detect.tools: 
        # The tools Detect should allow in a comma-separated list. Tools in this list (as long as they are not also in the excluded list) will be allowed to run if all criteria of the tool are met. Exclusion rules always win.
        # Acceptable values:[ALL, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, DOCKER, BAZEL, IAC_SCAN]
#detect.tools.excluded: 
        # The tools Detect should not allow, in a comma-separated list. Excluded tools will not be run even if all criteria for the tool is met. Exclusion rules always win.
        # Acceptable values:[NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, DOCKER, BAZEL, IAC_SCAN]
#detect.tools.output.path: 
        # The path to the tools directory where detect should download and/or access things like the Signature Scanner that it shares over multiple runs.

##
# PEAR
##
#detect.pear.dependency.types.excluded: NONE
        # Set this value to indicate which Pear dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, OPTIONAL]
#detect.pear.path: 
        # The path to the pear executable.

##
# PIP
##
#detect.pip.only.project.tree: false
        # By default, pipenv includes all dependencies found in the graph. Set to true to only include dependencies found underneath the dependency that matches the provided pip project and version name.
#detect.pip.path: 
        # The path to the Pip executable.
#detect.pip.project.name: 
        # The name of your PIP project, to be used if your project's name cannot be correctly inferred from its setup.py file.
#detect.pip.project.version.name: 
        # The version of your PIP project, to be used if your project's version name cannot be correctly inferred from its setup.py file.
#detect.pip.requirements.path: 
        # A comma-separated list of paths to requirements files, to be used to analyze requirements files with a filename other than requirements.txt or to specify which requirements files should be analyzed.
#detect.pipenv.path: 
        # The path to the Pipenv executable.
#detect.pipfile.dependency.types.excluded: NONE
        # A comma-separated list of dependency types that will be excluded.
        # Acceptable values:[NONE, DEV]

##
# PNPM
##
#detect.pnpm.dependency.types.excluded: NONE
        # Set this value to indicate which pnpm dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, DEV, OPTIONAL]

##
# PROJECT
##
#detect.clone.project.version.latest: false
        # If set to true, detect will attempt to use the latest project version as the clone for this project. The project must exist and have at least one version.
#detect.clone.project.version.name: 
        # The name of the project version to clone this project version from. Respects the given Clone Categories in detect.project.clone.categories or as set on the Black Duck server.
#detect.code.location.name: 
        # An override for the base name Detect will use for the scan (codelocation) it creates. Detect appends a suffix to the base name that indicates the source ("scan" for the signature scanner, "gradle/bom" for the Gradle detector, etc.). If this property is set and multiple code locations are generated from the same source, Detect will also append an index to avoid name collisions. When this property is set, detect.project.codelocation.prefix and detect.project.codelocation.suffix are ignored.
#detect.custom.fields.project: 
        # A  list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example, to set a custom field with label 'example' to 'one,two': `detect.custom.fields.project[0].label='example'` and `detect.custom.fields.project[0].value='one,two'`. To set another field, use index 1. Note that these will not show up in the detect configuration log.
#detect.custom.fields.version: 
        # A  list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example , to set a custom field with label 'example' to 'one,two': `detect.custom.fields.version[0].label='example'` and `detect.custom.fields.version[0].value='one,two'`. To set another field, use index 1. Note that these will not show up in the detect configuration log.
#detect.parent.project.name: 
        # When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck.
#detect.parent.project.version.name: 
        # When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck.
#detect.policy.check.fail.on.names: 
        # A comma-separated list of policy names with a non-zero number of violations that will fail Detect.
#detect.policy.check.fail.on.severities: NONE
        # A comma-separated list of policy violation severities that will fail Detect. If this is set to NONE, Detect will not fail due to policy violations. A value of ALL is equivalent to all of the other possible values except NONE.
        # Acceptable values:[ALL, NONE, BLOCKER, CRITICAL, MAJOR, MINOR, OK, TRIVIAL, UNSPECIFIED]
#detect.project.application.id: 
        # Sets the 'Application ID' project setting.
#detect.project.clone.categories: ALL
        # The value of this property is used to set the 'Cloning' settings on created Black Duck projects. If property detect.project.version.update is set to true, the value of this property is used to set the 'Cloning' settings on updated Black Duck projects.
        # Acceptable values:[ALL, NONE, COMPONENT_DATA, CUSTOM_FIELD_DATA, DEEP_LICENSE, LICENSE_TERM_FULFILLMENT, VERSION_SETTINGS, VULN_DATA]
#detect.project.codelocation.prefix: 
        # A prefix to the name of the scans created by Detect. Useful for running against the same projects on multiple machines.
#detect.project.codelocation.suffix: 
        # A suffix to the name of the scans created by Detect.
#detect.project.codelocation.unmap: false
        # If set to true, unmaps all other scans mapped to the project version produced by the current run of Detect.
#detect.project.description: 
        # If project description is specified, your project will be created with this description. For updates, see detect.project.version.update.
#detect.project.group.name: 
        # Sets the 'Project Group' to assign the project to. Must match exactly to an existing project group on Black Duck.
#detect.project.level.adjustments: true
        # If set, created projects will be created with the value of this property. For updates, see detect.project.version.update.
#detect.project.name: 
        # An override for the name to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable project name. If that fails, the final part of the directory path where the inspection is taking place will be used.
#detect.project.tags: 
        # A comma-separated list of tags to add to the project. This property is not supported when using Synopsys Detect in offline mode.
#detect.project.tier: 
        # If a Black Duck project tier is specified, your project will be created with this tier. For updates, see detect.project.version.update.
#detect.project.user.groups: 
        # A comma-separated list of names of user groups to add to the project.
#detect.project.version.distribution: EXTERNAL
        # If project version distribution is specified, your project version will be created with this distribution. For updates, see detect.project.version.update.
        # Acceptable values:[EXTERNAL, INTERNAL, OPENSOURCE, SAAS]
#detect.project.version.license: 
        # If project version license is specified, your project version will be created with this license. For updates, see detect.project.version.update.
#detect.project.version.name: 
        # An override for the version to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable version name. If that fails, the current date will be used.
#detect.project.version.nickname: 
        # If a project version nickname is specified, your project version will be created with this nickname. For updates, see detect.project.version.update.
#detect.project.version.notes: 
        # If project version notes are specified, your project version will be created with these notes. For updates, see detect.project.version.update.
#detect.project.version.phase: DEVELOPMENT
        # If project version phase is specified, your project version will be created with this phase. For updates, see detect.project.version.update.
        # Acceptable values:[ARCHIVED, DEPRECATED, DEVELOPMENT, PLANNING, PRERELEASE, RELEASED]
#detect.project.version.update: false
        # If set to true, Detect will update the Black Duck project and project version according to configured project and project version properties. (By default, these properties are only set on created projects / project versions.)

##
# PROJECT INSPECTOR
##
#detect.project.inspector.arguments: 
        # A space-separated list of additional options to pass to all invocations of the project inspector.
#detect.project.inspector.path: 
        # Use this property to point Detect to a local Project Inspector zip file, instead of the default Project Inspector zip file that Detect downloads from the binary repository. You need to ensure the version is compatible (the same major version that Detect downloads by default).

##
# PROXY
##
#blackduck.proxy.host: 
        # Hostname for proxy server.
#blackduck.proxy.ignored.hosts: 
        # A comma separated list of regular expression host patterns that should not use the proxy.
#blackduck.proxy.ntlm.domain: 
        # NTLM Proxy domain.
#blackduck.proxy.ntlm.workstation: 
        # NTLM Proxy workstation.
#blackduck.proxy.password: 
        # Proxy password.
#blackduck.proxy.port: 
        # Proxy port.
#blackduck.proxy.username: 
        # Proxy username.

##
# PYTHON
##
#detect.python.path: 
        # The path to the Python executable.

##
# RAPID SCAN
##
#detect.blackduck.rapid.compare.mode: ALL
        # Controls how rapid scan evaluates policy rules
        # Acceptable values:[ALL, BOM_COMPARE, BOM_COMPARE_STRICT]

##
# REPORT
##
#detect.notices.report: false
        # When set to true, a Black Duck notices report in text form will be created in your source directory.
#detect.notices.report.path: 
        # The output directory for notices report. Default is the source directory.
#detect.risk.report.pdf: false
        # When set to true, a Black Duck risk report in PDF form will be created.
#detect.risk.report.pdf.path: 
        # The output directory for risk report in PDF. Default is the source directory.

##
# RUBY
##
#detect.ruby.dependency.types.excluded: NONE
        # Set this value to indicate which Ruby(Gempsec) dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, RUNTIME, DEV]

##
# SBT
##
#detect.sbt.arguments: 
        # A space-separated list of additional arguments to add to sbt command line when running Detect against an SBT project. Detect will execute the command 'sbt {additional arguments} {Detect-added arguments}'.
#detect.sbt.path: 
        # Path to the Sbt executable.

##
# SIGNATURE SCANNER
##
#detect.blackduck.signature.scanner.arguments: 
        # A space-separated list of additional arguments to use when running the Black Duck signature scanner.
#detect.blackduck.signature.scanner.copyright.search: false
        # When set to true, user will be able to scan and discover copyright names in Black Duck. Corresponding Signature Scanner CLI Argument: --copyright-search.
#detect.blackduck.signature.scanner.dry.run: false
        # If set to true, the signature scanner results are not uploaded to Black Duck, and the scanner results are written to disk via the Signature Scanner CLI argument: --dryRunWriteDir.
#detect.blackduck.signature.scanner.individual.file.matching: NONE
        # Users may set this property to indicate what types of files they want to match. Corresponding Signature Scanner CLI Argument: --individualFileMatching.
        # Acceptable values:[NONE, SOURCE, BINARY, ALL]
#detect.blackduck.signature.scanner.license.search: false
        # When set to true, user will be able to scan and discover license names in Black Duck. Corresponding Signature Scanner CLI Argument: --license-search.
#detect.blackduck.signature.scanner.local.path: 
        # To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli.
#detect.blackduck.signature.scanner.memory: 4096
        # The memory for the scanner to use.
#detect.blackduck.signature.scanner.paths: 
        # If this property is not set, the signature scanner target path is the source path (see property detect.source.path). If this property is set, the paths provided in this property's value will be signature scanned instead (the signature scanner will be executed once for each provided path).
#detect.blackduck.signature.scanner.reduced.persistence: DEFAULT
        # Use this value to control how unmatched files from signature scans are stored. For a full explanation, please refer to <xref href="https://community.synopsys.com/s/document-item?bundleId=bd-hub&topicId=ComponentDiscovery%2Fabout_reduced_persistence_signature_scanning.html&_LANG=enus" scope="external" outputclass="external" format="html" target="_blank">about reduced persistence signature scanning.</xref>
        # Acceptable values:[DEFAULT, RETAIN_UNMATCHED, DISCARD_UNMATCHED]
#detect.blackduck.signature.scanner.snippet.matching: NONE
        # Use this value to enable the various snippet scanning modes. For a full explanation, please refer to the 'Running a component scan using the Signature Scanner command line' section in your Black Duck server's online help. Corresponding Signature Scanner CLI Arguments: --snippet-matching, --snippet-matching-only, --full-snippet-scan.
        # Acceptable values:[NONE, SNIPPET_MATCHING, SNIPPET_MATCHING_ONLY, FULL_SNIPPET_MATCHING, FULL_SNIPPET_MATCHING_ONLY]
#detect.blackduck.signature.scanner.upload.source.mode: false
        # If set to true, the signature scanner will, if supported by your Black Duck version, upload source code to Black Duck. Corresponding Signature Scanner CLI Argument: --upload-source.
#detect.excluded.directories.search.depth: 4
        # Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns.

##
# SWIFT
##
#detect.swift.path: 
        # Path of the swift executable.

##
# YARN
##
#detect.yarn.dependency.types.excluded: NONE
        # Set this value to indicate which Yarn dependency types Detect should exclude from the BOM.
        # Acceptable values:[NONE, NON_PRODUCTION]
#detect.yarn.excluded.workspaces: 
        # A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to exclude.
#detect.yarn.included.workspaces: 
        # A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to include.